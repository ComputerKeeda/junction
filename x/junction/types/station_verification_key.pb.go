// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/junction/station_verification_key.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StationVerificationKey struct {
	StationId       string `protobuf:"bytes,1,opt,name=stationId,proto3" json:"stationId,omitempty"`
	VerificationKey []byte `protobuf:"bytes,2,opt,name=verificationKey,proto3" json:"verificationKey,omitempty"`
}

func (m *StationVerificationKey) Reset()         { *m = StationVerificationKey{} }
func (m *StationVerificationKey) String() string { return proto.CompactTextString(m) }
func (*StationVerificationKey) ProtoMessage()    {}
func (*StationVerificationKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_e0e23cb8412dffa0, []int{0}
}
func (m *StationVerificationKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StationVerificationKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StationVerificationKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StationVerificationKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StationVerificationKey.Merge(m, src)
}
func (m *StationVerificationKey) XXX_Size() int {
	return m.Size()
}
func (m *StationVerificationKey) XXX_DiscardUnknown() {
	xxx_messageInfo_StationVerificationKey.DiscardUnknown(m)
}

var xxx_messageInfo_StationVerificationKey proto.InternalMessageInfo

func (m *StationVerificationKey) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *StationVerificationKey) GetVerificationKey() []byte {
	if m != nil {
		return m.VerificationKey
	}
	return nil
}

func init() {
	proto.RegisterType((*StationVerificationKey)(nil), "junction.junction.StationVerificationKey")
}

func init() {
	proto.RegisterFile("junction/junction/station_verification_key.proto", fileDescriptor_e0e23cb8412dffa0)
}

var fileDescriptor_e0e23cb8412dffa0 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0xc8, 0x2a, 0xcd, 0x4b,
	0x2e, 0xc9, 0xcc, 0xcf, 0xd3, 0x87, 0x33, 0x8a, 0x4b, 0x12, 0x41, 0x74, 0x7c, 0x59, 0x6a, 0x51,
	0x66, 0x5a, 0x66, 0x32, 0x84, 0x93, 0x9d, 0x5a, 0xa9, 0x57, 0x50, 0x94, 0x5f, 0x92, 0x2f, 0x24,
	0x08, 0x53, 0xa8, 0x07, 0x63, 0x28, 0x25, 0x70, 0x89, 0x05, 0x43, 0x34, 0x85, 0x21, 0xe9, 0xf1,
	0x4e, 0xad, 0x14, 0x92, 0xe1, 0xe2, 0x84, 0x1a, 0xe7, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x19, 0x84, 0x10, 0x10, 0xd2, 0xe0, 0xe2, 0x2f, 0x43, 0xd5, 0x20, 0xc1, 0xa4, 0xc0, 0xa8, 0xc1,
	0x13, 0x84, 0x2e, 0xec, 0xe4, 0x73, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e,
	0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51,
	0x46, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xce, 0xf9, 0xb9, 0x05,
	0xa5, 0x25, 0xa9, 0x45, 0xde, 0xa9, 0xa9, 0x29, 0x89, 0x08, 0x0f, 0x55, 0x20, 0x98, 0x25, 0x95,
	0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60, 0x9f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xa7,
	0x58, 0x64, 0xfd, 0x00, 0x00, 0x00,
}

func (m *StationVerificationKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StationVerificationKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StationVerificationKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VerificationKey) > 0 {
		i -= len(m.VerificationKey)
		copy(dAtA[i:], m.VerificationKey)
		i = encodeVarintStationVerificationKey(dAtA, i, uint64(len(m.VerificationKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintStationVerificationKey(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStationVerificationKey(dAtA []byte, offset int, v uint64) int {
	offset -= sovStationVerificationKey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StationVerificationKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovStationVerificationKey(uint64(l))
	}
	l = len(m.VerificationKey)
	if l > 0 {
		n += 1 + l + sovStationVerificationKey(uint64(l))
	}
	return n
}

func sovStationVerificationKey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStationVerificationKey(x uint64) (n int) {
	return sovStationVerificationKey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StationVerificationKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStationVerificationKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StationVerificationKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StationVerificationKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStationVerificationKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStationVerificationKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStationVerificationKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStationVerificationKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStationVerificationKey
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStationVerificationKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationKey = append(m.VerificationKey[:0], dAtA[iNdEx:postIndex]...)
			if m.VerificationKey == nil {
				m.VerificationKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStationVerificationKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStationVerificationKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStationVerificationKey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStationVerificationKey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStationVerificationKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStationVerificationKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStationVerificationKey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStationVerificationKey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStationVerificationKey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStationVerificationKey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStationVerificationKey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStationVerificationKey = fmt.Errorf("proto: unexpected end of group")
)
