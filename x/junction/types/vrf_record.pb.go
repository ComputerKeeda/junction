// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/junction/vrf_record.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VrfRecord struct {
	VrfCreatorAddr           string `protobuf:"bytes,1,opt,name=vrfCreatorAddr,proto3" json:"vrfCreatorAddr,omitempty"`
	VrfVerifierAddr          string `protobuf:"bytes,2,opt,name=vrfVerifierAddr,proto3" json:"vrfVerifierAddr,omitempty"`
	PodNumber                string `protobuf:"bytes,3,opt,name=podNumber,proto3" json:"podNumber,omitempty"`
	StationId                string `protobuf:"bytes,4,opt,name=stationId,proto3" json:"stationId,omitempty"`
	Occupancy                string `protobuf:"bytes,5,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
	CreatorsVrfKey           string `protobuf:"bytes,6,opt,name=creatorsVrfKey,proto3" json:"creatorsVrfKey,omitempty"`
	SerializedRcFromCreator  []byte `protobuf:"bytes,7,opt,name=serializedRcFromCreator,proto3" json:"serializedRcFromCreator,omitempty"`
	SerializedRcFromVerifier []byte `protobuf:"bytes,8,opt,name=serializedRcFromVerifier,proto3" json:"serializedRcFromVerifier,omitempty"`
	Proof                    []byte `protobuf:"bytes,9,opt,name=proof,proto3" json:"proof,omitempty"`
	VrfOutput                []byte `protobuf:"bytes,10,opt,name=vrfOutput,proto3" json:"vrfOutput,omitempty"`
	IsVerified               bool   `protobuf:"varint,11,opt,name=isVerified,proto3" json:"isVerified,omitempty"`
	Vrn                      []byte `protobuf:"bytes,12,opt,name=vrn,proto3" json:"vrn,omitempty"`
}

func (m *VrfRecord) Reset()         { *m = VrfRecord{} }
func (m *VrfRecord) String() string { return proto.CompactTextString(m) }
func (*VrfRecord) ProtoMessage()    {}
func (*VrfRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_7256ea38bc2b64ec, []int{0}
}
func (m *VrfRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VrfRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VrfRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VrfRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrfRecord.Merge(m, src)
}
func (m *VrfRecord) XXX_Size() int {
	return m.Size()
}
func (m *VrfRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_VrfRecord.DiscardUnknown(m)
}

var xxx_messageInfo_VrfRecord proto.InternalMessageInfo

func (m *VrfRecord) GetVrfCreatorAddr() string {
	if m != nil {
		return m.VrfCreatorAddr
	}
	return ""
}

func (m *VrfRecord) GetVrfVerifierAddr() string {
	if m != nil {
		return m.VrfVerifierAddr
	}
	return ""
}

func (m *VrfRecord) GetPodNumber() string {
	if m != nil {
		return m.PodNumber
	}
	return ""
}

func (m *VrfRecord) GetStationId() string {
	if m != nil {
		return m.StationId
	}
	return ""
}

func (m *VrfRecord) GetOccupancy() string {
	if m != nil {
		return m.Occupancy
	}
	return ""
}

func (m *VrfRecord) GetCreatorsVrfKey() string {
	if m != nil {
		return m.CreatorsVrfKey
	}
	return ""
}

func (m *VrfRecord) GetSerializedRcFromCreator() []byte {
	if m != nil {
		return m.SerializedRcFromCreator
	}
	return nil
}

func (m *VrfRecord) GetSerializedRcFromVerifier() []byte {
	if m != nil {
		return m.SerializedRcFromVerifier
	}
	return nil
}

func (m *VrfRecord) GetProof() []byte {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *VrfRecord) GetVrfOutput() []byte {
	if m != nil {
		return m.VrfOutput
	}
	return nil
}

func (m *VrfRecord) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

func (m *VrfRecord) GetVrn() []byte {
	if m != nil {
		return m.Vrn
	}
	return nil
}

func init() {
	proto.RegisterType((*VrfRecord)(nil), "junction.junction.VrfRecord")
}

func init() {
	proto.RegisterFile("junction/junction/vrf_record.proto", fileDescriptor_7256ea38bc2b64ec)
}

var fileDescriptor_7256ea38bc2b64ec = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0x9b, 0xaf, 0x5f, 0x6b, 0x33, 0x16, 0x7f, 0x06, 0xc1, 0x59, 0x48, 0x28, 0x5d, 0x48,
	0x56, 0x2d, 0xe8, 0x46, 0xdc, 0x69, 0x41, 0x90, 0x8a, 0x42, 0x16, 0x5d, 0xb8, 0x91, 0x74, 0x7e,
	0x74, 0xc4, 0x64, 0x86, 0x93, 0x99, 0x60, 0xbd, 0x0a, 0xef, 0xc7, 0x1b, 0x70, 0xd9, 0xa5, 0x4b,
	0x69, 0x6f, 0x44, 0x32, 0x69, 0x1b, 0x2d, 0x74, 0x77, 0xf2, 0x3c, 0xef, 0x84, 0xf7, 0xc0, 0x41,
	0xdd, 0x67, 0x9b, 0x52, 0x23, 0x55, 0xda, 0x5f, 0x0d, 0x39, 0x88, 0x07, 0xe0, 0x54, 0x01, 0xeb,
	0x69, 0x50, 0x46, 0xe1, 0xfd, 0xa5, 0xea, 0x2d, 0x87, 0xee, 0x47, 0x1d, 0xf9, 0x23, 0x10, 0x91,
	0x8b, 0xe1, 0x63, 0xb4, 0x93, 0x83, 0x18, 0x00, 0x8f, 0x8d, 0x82, 0x0b, 0xc6, 0x80, 0x78, 0x1d,
	0x2f, 0xf4, 0xa3, 0x35, 0x8a, 0x43, 0xb4, 0x9b, 0x83, 0x18, 0x71, 0x90, 0x42, 0xf2, 0x32, 0xf8,
	0xcf, 0x05, 0xd7, 0x31, 0x3e, 0x42, 0xbe, 0x56, 0xec, 0xd6, 0x26, 0x63, 0x0e, 0xa4, 0xee, 0x32,
	0x15, 0x28, 0x6c, 0x66, 0xe2, 0xa2, 0xc8, 0x35, 0x23, 0xff, 0x4b, 0xbb, 0x02, 0x85, 0x55, 0x94,
	0x5a, 0x1d, 0xa7, 0x74, 0x42, 0x1a, 0xa5, 0x5d, 0x81, 0xa2, 0x2b, 0x2d, 0x2b, 0x65, 0x23, 0x10,
	0x43, 0x3e, 0x21, 0xcd, 0xb2, 0xeb, 0x5f, 0x8a, 0xcf, 0xd0, 0x61, 0xc6, 0x41, 0xc6, 0x2f, 0xf2,
	0x8d, 0xb3, 0x88, 0x5e, 0x81, 0x4a, 0x16, 0xab, 0x90, 0xad, 0x8e, 0x17, 0xb6, 0xa3, 0x4d, 0x1a,
	0x9f, 0x23, 0xb2, 0xae, 0x96, 0xbb, 0x91, 0x96, 0x7b, 0xba, 0xd1, 0xe3, 0x03, 0xd4, 0xd0, 0xa0,
	0x94, 0x20, 0xbe, 0x0b, 0x96, 0x1f, 0xc5, 0x46, 0x39, 0x88, 0x3b, 0x6b, 0xb4, 0x35, 0x04, 0x39,
	0x53, 0x01, 0x1c, 0x20, 0x24, 0xb3, 0xc5, 0x1f, 0x18, 0xd9, 0xee, 0x78, 0x61, 0x2b, 0xfa, 0x45,
	0xf0, 0x1e, 0xaa, 0xe7, 0x90, 0x92, 0xb6, 0x7b, 0x57, 0x8c, 0x97, 0x37, 0x9f, 0xb3, 0xc0, 0x9b,
	0xce, 0x02, 0xef, 0x7b, 0x16, 0x78, 0xef, 0xf3, 0xa0, 0x36, 0x9d, 0x07, 0xb5, 0xaf, 0x79, 0x50,
	0xbb, 0x3f, 0x79, 0x94, 0xe6, 0xc9, 0x8e, 0x7b, 0x54, 0x25, 0xfd, 0x81, 0x4a, 0xb4, 0x35, 0x1c,
	0x86, 0x9c, 0xb3, 0xb8, 0x3a, 0x8f, 0xd7, 0x6a, 0x34, 0x13, 0xcd, 0xb3, 0x71, 0xd3, 0x5d, 0xc9,
	0xe9, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x68, 0x73, 0x35, 0x3e, 0x4b, 0x02, 0x00, 0x00,
}

func (m *VrfRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VrfRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vrn) > 0 {
		i -= len(m.Vrn)
		copy(dAtA[i:], m.Vrn)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.Vrn)))
		i--
		dAtA[i] = 0x62
	}
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.VrfOutput) > 0 {
		i -= len(m.VrfOutput)
		copy(dAtA[i:], m.VrfOutput)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.VrfOutput)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SerializedRcFromVerifier) > 0 {
		i -= len(m.SerializedRcFromVerifier)
		copy(dAtA[i:], m.SerializedRcFromVerifier)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.SerializedRcFromVerifier)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SerializedRcFromCreator) > 0 {
		i -= len(m.SerializedRcFromCreator)
		copy(dAtA[i:], m.SerializedRcFromCreator)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.SerializedRcFromCreator)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.CreatorsVrfKey) > 0 {
		i -= len(m.CreatorsVrfKey)
		copy(dAtA[i:], m.CreatorsVrfKey)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.CreatorsVrfKey)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Occupancy) > 0 {
		i -= len(m.Occupancy)
		copy(dAtA[i:], m.Occupancy)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.Occupancy)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.StationId) > 0 {
		i -= len(m.StationId)
		copy(dAtA[i:], m.StationId)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.StationId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PodNumber) > 0 {
		i -= len(m.PodNumber)
		copy(dAtA[i:], m.PodNumber)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.PodNumber)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.VrfVerifierAddr) > 0 {
		i -= len(m.VrfVerifierAddr)
		copy(dAtA[i:], m.VrfVerifierAddr)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.VrfVerifierAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.VrfCreatorAddr) > 0 {
		i -= len(m.VrfCreatorAddr)
		copy(dAtA[i:], m.VrfCreatorAddr)
		i = encodeVarintVrfRecord(dAtA, i, uint64(len(m.VrfCreatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVrfRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovVrfRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VrfRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.VrfCreatorAddr)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	l = len(m.VrfVerifierAddr)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	l = len(m.PodNumber)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	l = len(m.StationId)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	l = len(m.Occupancy)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	l = len(m.CreatorsVrfKey)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	l = len(m.SerializedRcFromCreator)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	l = len(m.SerializedRcFromVerifier)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	l = len(m.VrfOutput)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	if m.IsVerified {
		n += 2
	}
	l = len(m.Vrn)
	if l > 0 {
		n += 1 + l + sovVrfRecord(uint64(l))
	}
	return n
}

func sovVrfRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVrfRecord(x uint64) (n int) {
	return sovVrfRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VrfRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrfRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfCreatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfCreatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfVerifierAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfVerifierAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PodNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Occupancy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Occupancy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorsVrfKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorsVrfKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedRcFromCreator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedRcFromCreator = append(m.SerializedRcFromCreator[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedRcFromCreator == nil {
				m.SerializedRcFromCreator = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SerializedRcFromVerifier", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SerializedRcFromVerifier = append(m.SerializedRcFromVerifier[:0], dAtA[iNdEx:postIndex]...)
			if m.SerializedRcFromVerifier == nil {
				m.SerializedRcFromVerifier = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof[:0], dAtA[iNdEx:postIndex]...)
			if m.Proof == nil {
				m.Proof = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfOutput", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VrfOutput = append(m.VrfOutput[:0], dAtA[iNdEx:postIndex]...)
			if m.VrfOutput == nil {
				m.VrfOutput = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrn", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVrfRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vrn = append(m.Vrn[:0], dAtA[iNdEx:postIndex]...)
			if m.Vrn == nil {
				m.Vrn = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrfRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVrfRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVrfRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVrfRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrfRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVrfRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVrfRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVrfRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVrfRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVrfRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVrfRecord = fmt.Errorf("proto: unexpected end of group")
)
