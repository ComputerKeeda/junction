// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: junction/junction/stations.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Stations struct {
	Tracks               []string `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	VotingPower          []uint64 `protobuf:"varint,2,rep,packed,name=votingPower,proto3" json:"votingPower,omitempty"`
	LatestPod            uint64   `protobuf:"varint,3,opt,name=latestPod,proto3" json:"latestPod,omitempty"`
	LatestMerkleRootHash string   `protobuf:"bytes,4,opt,name=latestMerkleRootHash,proto3" json:"latestMerkleRootHash,omitempty"`
	VerificationKey      []byte   `protobuf:"bytes,5,opt,name=verificationKey,proto3" json:"verificationKey,omitempty"`
	StationInfo          string   `protobuf:"bytes,6,opt,name=stationInfo,proto3" json:"stationInfo,omitempty"`
	Id                   string   `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	Creator              string   `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	Spsp                 string   `protobuf:"bytes,9,opt,name=spsp,proto3" json:"spsp,omitempty"`
}

func (m *Stations) Reset()         { *m = Stations{} }
func (m *Stations) String() string { return proto.CompactTextString(m) }
func (*Stations) ProtoMessage()    {}
func (*Stations) Descriptor() ([]byte, []int) {
	return fileDescriptor_b109932e5845c06b, []int{0}
}
func (m *Stations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Stations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Stations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Stations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stations.Merge(m, src)
}
func (m *Stations) XXX_Size() int {
	return m.Size()
}
func (m *Stations) XXX_DiscardUnknown() {
	xxx_messageInfo_Stations.DiscardUnknown(m)
}

var xxx_messageInfo_Stations proto.InternalMessageInfo

func (m *Stations) GetTracks() []string {
	if m != nil {
		return m.Tracks
	}
	return nil
}

func (m *Stations) GetVotingPower() []uint64 {
	if m != nil {
		return m.VotingPower
	}
	return nil
}

func (m *Stations) GetLatestPod() uint64 {
	if m != nil {
		return m.LatestPod
	}
	return 0
}

func (m *Stations) GetLatestMerkleRootHash() string {
	if m != nil {
		return m.LatestMerkleRootHash
	}
	return ""
}

func (m *Stations) GetVerificationKey() []byte {
	if m != nil {
		return m.VerificationKey
	}
	return nil
}

func (m *Stations) GetStationInfo() string {
	if m != nil {
		return m.StationInfo
	}
	return ""
}

func (m *Stations) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Stations) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Stations) GetSpsp() string {
	if m != nil {
		return m.Spsp
	}
	return ""
}

func init() {
	proto.RegisterType((*Stations)(nil), "junction.junction.Stations")
}

func init() { proto.RegisterFile("junction/junction/stations.proto", fileDescriptor_b109932e5845c06b) }

var fileDescriptor_b109932e5845c06b = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4e, 0x02, 0x31,
	0x14, 0x86, 0xe9, 0x30, 0x02, 0x53, 0x8d, 0xc6, 0xc6, 0x98, 0x2e, 0xcc, 0xa4, 0x71, 0xd5, 0x15,
	0x24, 0x78, 0x03, 0xdd, 0x68, 0xd0, 0x84, 0xd4, 0x9d, 0xbb, 0x32, 0x53, 0xa0, 0x02, 0xf3, 0x26,
	0xed, 0x03, 0xe5, 0x16, 0x1e, 0xc1, 0xe3, 0xb8, 0x64, 0xe9, 0xd2, 0xc0, 0x45, 0x0c, 0x15, 0x84,
	0x18, 0x57, 0xfd, 0xfe, 0xef, 0x6f, 0x9a, 0xd7, 0x3c, 0x2a, 0x9e, 0xa7, 0x45, 0x86, 0x16, 0x8a,
	0xd6, 0x2f, 0x78, 0xd4, 0xeb, 0xd3, 0x37, 0x4b, 0x07, 0x08, 0xec, 0x74, 0x5b, 0x34, 0xb7, 0x70,
	0xf9, 0x1e, 0xd1, 0xc6, 0xe3, 0xe6, 0x16, 0x3b, 0xa7, 0x35, 0x74, 0x3a, 0x1b, 0x79, 0x4e, 0x44,
	0x55, 0x26, 0x6a, 0x93, 0x98, 0xa0, 0x87, 0x33, 0x40, 0x5b, 0x0c, 0xba, 0xf0, 0x62, 0x1c, 0x8f,
	0x44, 0x55, 0xc6, 0x6a, 0x5f, 0xb1, 0x0b, 0x9a, 0x8c, 0x35, 0x1a, 0x8f, 0x5d, 0xc8, 0x79, 0x55,
	0x10, 0x19, 0xab, 0x9d, 0x60, 0x6d, 0x7a, 0xf6, 0x13, 0x1e, 0x8c, 0x1b, 0x8d, 0x8d, 0x02, 0xc0,
	0x5b, 0xed, 0x87, 0x3c, 0x16, 0x44, 0x26, 0xea, 0xdf, 0x8e, 0x49, 0x7a, 0x32, 0x33, 0xce, 0xf6,
	0x6d, 0x16, 0x86, 0xeb, 0x98, 0x39, 0x3f, 0x10, 0x44, 0x1e, 0xa9, 0xbf, 0x7a, 0x3d, 0xdd, 0xe6,
	0x9f, 0x77, 0x45, 0x1f, 0x78, 0x2d, 0x3c, 0xba, 0xaf, 0xd8, 0x31, 0x8d, 0x6c, 0xce, 0xeb, 0xa1,
	0x88, 0x6c, 0xce, 0x38, 0xad, 0x67, 0xce, 0x68, 0x04, 0xc7, 0x1b, 0x41, 0x6e, 0x23, 0x63, 0x34,
	0xf6, 0xa5, 0x2f, 0x79, 0x12, 0x74, 0xe0, 0xeb, 0xfb, 0x8f, 0x65, 0x4a, 0x16, 0xcb, 0x94, 0x7c,
	0x2d, 0x53, 0xf2, 0xb6, 0x4a, 0x2b, 0x8b, 0x55, 0x5a, 0xf9, 0x5c, 0xa5, 0x95, 0xa7, 0xf6, 0xc0,
	0xe2, 0x70, 0xda, 0x6b, 0x66, 0x30, 0x69, 0xdd, 0xc0, 0xa4, 0x9c, 0xa2, 0x71, 0x1d, 0x63, 0x72,
	0xbd, 0xdb, 0xc0, 0xeb, 0x0e, 0x71, 0x5e, 0x1a, 0xdf, 0xab, 0x85, 0x55, 0x5c, 0x7d, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x30, 0xa9, 0x06, 0xc5, 0xae, 0x01, 0x00, 0x00,
}

func (m *Stations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Stations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Stations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Spsp) > 0 {
		i -= len(m.Spsp)
		copy(dAtA[i:], m.Spsp)
		i = encodeVarintStations(dAtA, i, uint64(len(m.Spsp)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintStations(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintStations(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StationInfo) > 0 {
		i -= len(m.StationInfo)
		copy(dAtA[i:], m.StationInfo)
		i = encodeVarintStations(dAtA, i, uint64(len(m.StationInfo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.VerificationKey) > 0 {
		i -= len(m.VerificationKey)
		copy(dAtA[i:], m.VerificationKey)
		i = encodeVarintStations(dAtA, i, uint64(len(m.VerificationKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LatestMerkleRootHash) > 0 {
		i -= len(m.LatestMerkleRootHash)
		copy(dAtA[i:], m.LatestMerkleRootHash)
		i = encodeVarintStations(dAtA, i, uint64(len(m.LatestMerkleRootHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.LatestPod != 0 {
		i = encodeVarintStations(dAtA, i, uint64(m.LatestPod))
		i--
		dAtA[i] = 0x18
	}
	if len(m.VotingPower) > 0 {
		dAtA2 := make([]byte, len(m.VotingPower)*10)
		var j1 int
		for _, num := range m.VotingPower {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintStations(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tracks) > 0 {
		for iNdEx := len(m.Tracks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tracks[iNdEx])
			copy(dAtA[i:], m.Tracks[iNdEx])
			i = encodeVarintStations(dAtA, i, uint64(len(m.Tracks[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStations(dAtA []byte, offset int, v uint64) int {
	offset -= sovStations(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Stations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tracks) > 0 {
		for _, s := range m.Tracks {
			l = len(s)
			n += 1 + l + sovStations(uint64(l))
		}
	}
	if len(m.VotingPower) > 0 {
		l = 0
		for _, e := range m.VotingPower {
			l += sovStations(uint64(e))
		}
		n += 1 + sovStations(uint64(l)) + l
	}
	if m.LatestPod != 0 {
		n += 1 + sovStations(uint64(m.LatestPod))
	}
	l = len(m.LatestMerkleRootHash)
	if l > 0 {
		n += 1 + l + sovStations(uint64(l))
	}
	l = len(m.VerificationKey)
	if l > 0 {
		n += 1 + l + sovStations(uint64(l))
	}
	l = len(m.StationInfo)
	if l > 0 {
		n += 1 + l + sovStations(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovStations(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovStations(uint64(l))
	}
	l = len(m.Spsp)
	if l > 0 {
		n += 1 + l + sovStations(uint64(l))
	}
	return n
}

func sovStations(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStations(x uint64) (n int) {
	return sovStations(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Stations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStations
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tracks = append(m.Tracks, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStations
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.VotingPower = append(m.VotingPower, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStations
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStations
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStations
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.VotingPower) == 0 {
					m.VotingPower = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStations
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.VotingPower = append(m.VotingPower, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingPower", wireType)
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestPod", wireType)
			}
			m.LatestPod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestPod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestMerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestMerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStations
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationKey = append(m.VerificationKey[:0], dAtA[iNdEx:postIndex]...)
			if m.VerificationKey == nil {
				m.VerificationKey = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationInfo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationInfo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Spsp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStations
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStations
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStations
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Spsp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStations(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStations
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStations(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStations
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStations
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStations
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStations
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStations
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStations        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStations          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStations = fmt.Errorf("proto: unexpected end of group")
)
